# Tunnel Gateway Configuration
# INI-style format for clarity

# Container Configuration
CONTAINER_NAME="tunnel-gateway-dev"
CONTAINER_IP="10.10.199.150"

# ========================================================================================
# SSH TUNNEL DEFINITIONS
# ========================================================================================
# Each section [name] defines one tunnel with all its parameters
# The tunnel forwards: localhost:localPort -> SSH Server -> remoteHost:remotePort
#
# SSH credentials: Used to create the tunnel (SSH connection)
# DB/Service credentials: Documented here for your reference (used in your app code)
# ========================================================================================

[mysql-prod]
# SSH Connection (creates the tunnel)
sshAddress = 192.168.100.50
sshUsername = ubuntu
sshPassword = UbuntuPass123
# sshKeyFile = /path/to/key      # Use this instead of sshPassword for key auth
# sshPort = 22                   # Optional, default 22

# Tunnel Configuration
localPort = 3306                 # Port on THIS container
remoteHost = localhost           # Target from SSH server's perspective
remotePort = 3306                # MySQL port on target

# Database Credentials (for documentation - use these in your app)
dbUsername = root
dbPassword = DbPassword456
dbName = production_db

# Your app connects to:
#   JDBC: jdbc:mysql://10.10.199.150:3306/production_db
#   Username: root
#   Password: DbPassword456


[mysql-staging]
# SSH Connection
sshAddress = 192.168.100.51
sshUsername = ubuntu
sshPassword = StagingPass456

# Tunnel Configuration
localPort = 3307                 # Different local port (3307)
remoteHost = localhost
remotePort = 3306

# Database Credentials
dbUsername = staginguser
dbPassword = StagingDb789
dbName = staging_db

# Your app connects to:
#   JDBC: jdbc:mysql://10.10.199.150:3307/staging_db
#   Username: staginguser
#   Password: StagingDb789


[kafka-prod]
# SSH Connection (using key authentication)
sshAddress = 10.50.20.100
sshUsername = kafkaadmin
sshKeyFile = /home/user/.ssh/kafka_rsa
# sshPassword =                  # Not used when using key file
sshPort = 22

# Tunnel Configuration
localPort = 9092
remoteHost = localhost
remotePort = 9092

# Kafka Configuration (for documentation)
kafkaBootstrapServers = 10.10.199.150:9092
kafkaSecurityProtocol = PLAINTEXT
# kafkaUsername = kafkauser      # If SASL is used
# kafkaPassword = kafkapass      # If SASL is used

# Your app connects to:
#   bootstrap.servers=10.10.199.150:9092


[postgres-prod]
# SSH Connection
sshAddress = 172.16.0.50
sshUsername = dbadmin
sshKeyFile = /keys/postgres_key
sshPort = 2222                   # Custom SSH port

# Tunnel Configuration
localPort = 5432
remoteHost = 127.0.0.1
remotePort = 5432

# Database Credentials
dbUsername = postgres
dbPassword = PostgresPass123
dbName = production

# Your app connects to:
#   JDBC: jdbc:postgresql://10.10.199.150:5432/production
#   Username: postgres
#   Password: PostgresPass123


[redis-prod]
# SSH Connection
sshAddress = redis.company.com
sshUsername = redisadmin
sshPassword = Redis@2024

# Tunnel Configuration
localPort = 6379
remoteHost = localhost
remotePort = 6379

# Redis Configuration (for documentation)
redisPassword = RedisDbPass789   # Redis AUTH password
redisDatabase = 0

# Your app connects to:
#   Host: 10.10.199.150
#   Port: 6379
#   Password: RedisDbPass789


# ========================================================================================
# IMPORTANT NOTES
# ========================================================================================
#
# SSH Credentials (sshUsername, sshPassword, sshKeyFile):
#   - These create the SSH tunnel
#   - Authenticate to the SSH server
#   - Never touch the database/service itself
#
# Database/Service Credentials (dbUsername, dbPassword, kafkaUsername, etc.):
#   - These are for YOUR APPLICATION CODE
#   - Used when your app connects to 10.10.199.150:port
#   - Documented here for convenience and reference
#
# Flow:
#   1. Tunnel created using SSH credentials (ubuntu/UbuntuPass123)
#   2. Your app connects to 10.10.199.150:3306
#   3. Traffic tunneled through SSH
#   4. MySQL receives connection with DB credentials (root/DbPassword456)
#
# ========================================================================================


# Optional: Bind mounts for SSH keys
BIND_MOUNTS=(
    # "/home/user/.ssh:/keys:ro"  # Mount SSH keys read-only
)

# Auto-start tunnels on container boot
AUTO_START="true"

# Tunnel Gateway Configuration
# This file defines SSH tunnels for accessing remote services

# Container Configuration
CONTAINER_NAME="tunnel-gateway-dev"
CONTAINER_IP="10.10.199.150"  # Static IP from LXC private range

# SSH Tunnel Configuration Format
# ========================================================================================
# Format: NAME:LOCAL_PORT:SSH_HOST:SSH_USER:AUTH_TYPE:AUTH_VALUE:REMOTE_HOST:REMOTE_PORT
#
# This creates an SSH tunnel that forwards traffic:
#   Your App → Container (LOCAL_PORT) → SSH Tunnel → Target Service (REMOTE_HOST:REMOTE_PORT)
#
# ========================================================================================

TUNNELS=(
    # ================================================================================
    # Example 1: MySQL Production Database via SSH Tunnel
    # ================================================================================
    #
    # SCENARIO:
    #   - MySQL database is at 192.168.100.50:3306
    #   - You can SSH to that server with username "ubuntu" and password "UbuntuPass123"
    #   - MySQL DB username/password: root/DbPassword456 (used in your app code)
    #
    # TUNNEL DEFINITION:
    "mysql-prod:3306:192.168.100.50:ubuntu:PASSWORD:UbuntuPass123:localhost:3306"
    #           |    |                |      |        |            |        |
    #           |    |                |      |        |            |        └─ MySQL port on target server
    #           |    |                |      |        |            └─ Target: localhost (from SSH server's perspective)
    #           |    |                |      |        └─ SSH PASSWORD: UbuntuPass123
    #           |    |                |      └─ SSH USERNAME: ubuntu
    #           |    |                └─ SSH SERVER ADDRESS: 192.168.100.50
    #           |    └─ Local port on THIS container: 3306
    #           └─ Tunnel name: mysql-prod
    #
    # YOUR APP CONNECTS TO:
    #   JDBC URL: jdbc:mysql://10.10.199.150:3306/mydb
    #   DB Username: root          ← Your MySQL username
    #   DB Password: DbPassword456 ← Your MySQL password
    #
    # NOTE: SSH credentials (ubuntu/UbuntuPass123) are for the SSH tunnel only.
    #       Database credentials (root/DbPassword456) are used by your application.


    # ================================================================================
    # Example 2: Kafka Broker via SSH with Key Authentication
    # ================================================================================
    #
    # SCENARIO:
    #   - Kafka broker is at 10.50.20.100:9092
    #   - You SSH to that server using username "kafkaadmin" with SSH key
    #   - SSH private key is at: /home/youruser/.ssh/kafka_rsa
    #
    # TUNNEL DEFINITION:
    # "kafka-prod:9092:10.50.20.100:kafkaadmin:KEY:/home/youruser/.ssh/kafka_rsa:localhost:9092"
    #             |    |            |          |   |                              |        |
    #             |    |            |          |   |                              |        └─ Kafka port
    #             |    |            |          |   |                              └─ Target: localhost
    #             |    |            |          |   └─ SSH KEY PATH: /home/youruser/.ssh/kafka_rsa
    #             |    |            |          └─ SSH USERNAME: kafkaadmin
    #             |    |            └─ SSH SERVER ADDRESS: 10.50.20.100
    #             |    └─ Local port: 9092
    #             └─ Tunnel name: kafka-prod
    #
    # YOUR APP CONNECTS TO:
    #   bootstrap.servers=10.10.199.150:9092


    # ================================================================================
    # Example 3: PostgreSQL via SSH (Key from Mounted Volume)
    # ================================================================================
    #
    # SCENARIO:
    #   - PostgreSQL at 172.16.0.50:5432
    #   - SSH username "dbadmin" with key file
    #   - SSH key mounted into container at /keys/postgres_key (see BIND_MOUNTS below)
    #
    # TUNNEL DEFINITION:
    # "postgres-prod:5432:172.16.0.50:dbadmin:KEY:/keys/postgres_key:127.0.0.1:5432"
    #                |    |           |       |   |                  |          |
    #                |    |           |       |   |                  |          └─ PostgreSQL port
    #                |    |           |       |   |                  └─ Target: 127.0.0.1
    #                |    |           |       |   └─ SSH KEY PATH: /keys/postgres_key (inside container)
    #                |    |           |       └─ SSH USERNAME: dbadmin
    #                |    |           └─ SSH SERVER ADDRESS: 172.16.0.50
    #                |    └─ Local port: 5432
    #                └─ Tunnel name: postgres-prod
    #
    # YOUR APP CONNECTS TO:
    #   JDBC URL: jdbc:postgresql://10.10.199.150:5432/mydb
    #   DB Username: postgres      ← Your PostgreSQL username
    #   DB Password: YourDbPass123 ← Your PostgreSQL password
    #
    # REQUIRED: Uncomment BIND_MOUNTS below to mount the SSH key


    # ================================================================================
    # More Examples - Copy and Modify as Needed
    # ================================================================================

    # Redis with SSH password authentication
    # "redis-staging:6379:redis.staging.com:redisadmin:PASSWORD:Redis@2024:localhost:6379"
    #                     |                  |          |        |
    #                     SSH Server         SSH User   Password for SSH

    # MongoDB with SSH certificate/key
    # "mongo-prod:27017:mongo.prod.internal:mongouser:KEY:/home/user/.ssh/mongo_key:localhost:27017"
    #                   |                   |         |   |
    #                   SSH Server          SSH User  |   SSH Key Path
    #                                                 KEY auth type

    # Multiple databases through same SSH gateway
    # "mysql-db1:3307:gateway.company.com:sshuser:PASSWORD:GatewayPass:10.0.1.50:3306"
    # "mysql-db2:3308:gateway.company.com:sshuser:PASSWORD:GatewayPass:10.0.1.51:3306"
    # "postgres-db:5433:gateway.company.com:sshuser:PASSWORD:GatewayPass:10.0.1.60:5432"
)

# ========================================================================================
# IMPORTANT NOTES
# ========================================================================================
#
# 1. SSH CREDENTIALS vs DATABASE CREDENTIALS:
#    - SSH credentials (username/password/key) are ONLY for creating the tunnel
#    - Database credentials are still used in your application code
#    - Example:
#        SSH:      ubuntu / UbuntuPass123  ← Opens the tunnel
#        Database: root / DbPassword456    ← Used by your app (JDBC, etc.)
#
# 2. REMOTE_HOST (field 7):
#    - Usually "localhost" or "127.0.0.1"
#    - This is from the SSH server's perspective
#    - If MySQL is on the same server you SSH to, use "localhost"
#    - If MySQL is on another server accessible from SSH server, use that IP
#
# 3. AUTHENTICATION TYPES:
#    - PASSWORD: Plain text password (field 6 = password string)
#    - KEY: SSH private key file (field 6 = full path to key file)
#
# ========================================================================================

# ========================================================================================
# QUICK REFERENCE: Common Services Default Ports
# ========================================================================================
# MySQL/MariaDB:    3306
# PostgreSQL:       5432
# MongoDB:          27017
# Redis:            6379
# Kafka:            9092
# Zookeeper:        2181
# Elasticsearch:    9200
# RabbitMQ:         5672
# ========================================================================================

# Optional: Bind mounts for SSH keys
# Format: host_path:container_path
BIND_MOUNTS=(
    # "/home/mustafa/.ssh:/keys:ro"  # Mount SSH keys read-only
)

# Auto-start tunnels on container boot
AUTO_START="true"

#!/bin/bash
set -e

# Usage: ./launchTunnelGateway.sh [config_file]
CONFIG_FILE="${1:-$(dirname "$0")/sample.conf}"

if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file not found: $CONFIG_FILE"
    exit 1
fi

echo "Loading configuration from: $CONFIG_FILE"
source "$CONFIG_FILE"

# Validate configuration
if [ -z "$CONTAINER_NAME" ]; then
    echo "Error: CONTAINER_NAME not set in config"
    exit 1
fi

if [ -z "$CONTAINER_IP" ]; then
    echo "Error: CONTAINER_IP not set in config"
    exit 1
fi

if [ ${#TUNNELS[@]} -eq 0 ]; then
    echo "Error: No tunnels defined in TUNNELS array"
    exit 1
fi

# Determine image name and version
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
VERSION_DIR="$(dirname "$SCRIPT_DIR")"
VERSION=$(basename "$VERSION_DIR" | grep -o '[0-9]*$')
CONTAINER_BASE="tunnel-gateway"
IMAGE_NAME="${CONTAINER_BASE}:${VERSION}"

echo ""
echo "=========================================="
echo "Launching Tunnel Gateway"
echo "=========================================="
echo "Container: $CONTAINER_NAME"
echo "IP Address: $CONTAINER_IP"
echo "Image: $IMAGE_NAME"
echo "Tunnels: ${#TUNNELS[@]}"
echo ""

# Check if container already exists
if lxc list --format=csv -c n | grep -q "^${CONTAINER_NAME}$"; then
    echo "⚠️  Container $CONTAINER_NAME already exists"
    read -p "Delete and recreate? (y/N): " DELETE_EXISTING
    if [[ "$DELETE_EXISTING" =~ ^[Yy]$ ]]; then
        echo "Deleting existing container..."
        lxc delete "$CONTAINER_NAME" --force
    else
        echo "Aborted"
        exit 1
    fi
fi

echo "Creating container..."
lxc launch "local:${IMAGE_NAME}" "$CONTAINER_NAME"
sleep 3

echo ""
echo "Configuring network with static IP..."
lxc config device override "$CONTAINER_NAME" eth0 ipv4.address="$CONTAINER_IP"
lxc restart "$CONTAINER_NAME"
sleep 3

# Apply bind mounts if configured
if [ ${#BIND_MOUNTS[@]} -gt 0 ]; then
    echo ""
    echo "Applying bind mounts..."
    for mount in "${BIND_MOUNTS[@]}"; do
        IFS=':' read -r source dest opts <<< "$mount"
        MOUNT_NAME=$(basename "$source")

        echo "  Mounting: $source -> $dest"

        if [ -n "$opts" ] && [ "$opts" = "ro" ]; then
            lxc config device add "$CONTAINER_NAME" "$MOUNT_NAME" disk \
                source="$source" \
                path="$dest" \
                readonly=true
        else
            lxc config device add "$CONTAINER_NAME" "$MOUNT_NAME" disk \
                source="$source" \
                path="$dest"
        fi
    done
fi

echo ""
echo "Pushing tunnel configuration..."
# Create tunnels.conf content
TUNNELS_CONF="# Tunnel configuration generated by launch script\n"
TUNNELS_CONF+="# Generated at: $(date)\n\n"
TUNNELS_CONF+="TUNNELS=(\n"
for tunnel in "${TUNNELS[@]}"; do
    TUNNELS_CONF+="    \"$tunnel\"\n"
done
TUNNELS_CONF+=")\n"

# Push to container
echo -e "$TUNNELS_CONF" | lxc file push - "$CONTAINER_NAME/etc/tunnel-gateway/tunnels.conf"

# Validate tunnel configuration
echo ""
echo "Validating tunnel configuration..."
for tunnel in "${TUNNELS[@]}"; do
    IFS=':' read -r name local_port ssh_host ssh_user auth_type auth_value remote_host remote_port <<< "$tunnel"
    echo "  ✓ $name: 0.0.0.0:$local_port -> $ssh_user@$ssh_host -> $remote_host:$remote_port"
done

# Start tunnels if auto-start is enabled
if [ "$AUTO_START" = "true" ]; then
    echo ""
    echo "Starting tunnels..."
    lxc exec "$CONTAINER_NAME" -- /usr/local/bin/start-tunnels.sh

    sleep 2

    echo ""
    echo "Verifying tunnels..."
    lxc exec "$CONTAINER_NAME" -- /usr/local/bin/list-tunnels.sh
fi

echo ""
echo "=========================================="
echo "✅ Tunnel Gateway Ready!"
echo "=========================================="
echo ""
echo "Container Info:"
lxc list "$CONTAINER_NAME" --format=table --columns=ns4
echo ""
echo "Access Information:"
echo "  Container IP: $CONTAINER_IP"
echo "  Tunnels: ${#TUNNELS[@]} configured"
echo ""
echo "Management Commands:"
echo "  List tunnels:   lxc exec $CONTAINER_NAME -- /usr/local/bin/list-tunnels.sh"
echo "  Stop tunnels:   lxc exec $CONTAINER_NAME -- /usr/local/bin/stop-tunnels.sh"
echo "  Start tunnels:  lxc exec $CONTAINER_NAME -- /usr/local/bin/start-tunnels.sh"
echo "  Shell access:   lxc exec $CONTAINER_NAME -- bash"
echo "  Stop container: lxc stop $CONTAINER_NAME"
echo "  Delete:         lxc delete $CONTAINER_NAME --force"
echo ""
echo "Usage from your code:"
echo "  Instead of connecting to remote servers directly,"
echo "  connect to: $CONTAINER_IP:<port>"
echo ""

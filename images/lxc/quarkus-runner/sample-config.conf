# ============================================
# Sample App Container Configuration
# ============================================
# This is a SAMPLE showing how to build an app container
# that extends the quarkus-runner-base
#
# Copy this file and customize for your application:
#   cp sample-config.conf configs/myapp-build.conf

# ============================================
# Base Container Reference
# ============================================
# Which base container to extend from
BASE_CONTAINER="quarkus-runner-base"
BASE_VERSION="1"
BUILD_TYPE="app"  # This is an app build, not base

# ============================================
# Application Identity
# ============================================
APP_NAME="myapp"
APP_VERSION="1.0.0"
APP_DESCRIPTION="My Quarkus Application"

# Where is your JAR file?
APP_JAR_PATH="/path/to/myapp/target/myapp-runner.jar"
# Or for native executable:
# APP_NATIVE_PATH="/path/to/myapp/target/myapp-runner"
# PACKAGE_TYPE="native"

# ============================================
# Storage (MANDATORY - inherits BTRFS from base)
# ============================================
STORAGE_LOCATION_ID="btrfs_ssd_main"
STORAGE_QUOTA_SIZE="5G"        # App-specific quota
STORAGE_ROTATION_THRESHOLD="80"

# ============================================
# Memory & CPU (App-specific sizing)
# ============================================
MEMORY_LIMIT="1GB"             # Override base default
CPU_LIMIT="1"

# JVM heap auto-calculated as 75% of MEMORY_LIMIT
# Or specify manually:
# JVM_MAX_HEAP="768m"

# ============================================
# Application Runtime
# ============================================
QUARKUS_PROFILE="prod"         # dev, test, prod
QUARKUS_HTTP_PORT="8080"
QUARKUS_HTTPS_PORT="8443"

# Main class (optional, usually auto-detected)
# APP_MAIN_CLASS="com.company.myapp.Main"

# ============================================
# Database Configuration (Optional)
# ============================================
ENABLE_DATABASE="false"
# DATABASE_TYPE="postgresql"
# DATABASE_HOST="postgres-container"
# DATABASE_PORT="5432"
# DATABASE_NAME="myappdb"
# DATABASE_CREDENTIALS_FILE="/run/secrets/myapp-db-credentials"

# ============================================
# Logging Configuration (Complete)
# ============================================
# All Java apps use: SLF4J API + Log4j2 implementation

# ============================================
# Local Logging (Log4j2)
# ============================================
# Root log level
LOG_LEVEL="INFO"              # DEBUG, INFO, WARN, ERROR

# Package-specific log levels (comma-separated)
# Format: package=level,package2=level2
LOG_PACKAGE_LEVELS="com.yourcompany=DEBUG,io.quarkus=INFO,org.hibernate=WARN"

# Log format
LOG_FORMAT="json"             # json or text (json required for Loki)

# Log file location
LOG_DIR="/var/log/quarkus"
LOG_FILE_NAME="application.log"
LOG_FILE_PATH="${LOG_DIR}/${LOG_FILE_NAME}"

# Console logging (for debugging)
LOG_CONSOLE_ENABLED="true"
LOG_CONSOLE_FORMAT="text"    # text for human-readable console

# ============================================
# Log Rotation (Log4j2 built-in)
# ============================================
# Enable automatic rotation
LOG_ROTATION_ENABLED="true"

# Size-based rotation
LOG_MAX_FILE_SIZE="100MB"     # Rotate when file reaches this size

# Time-based rotation
LOG_ROTATION_INTERVAL="daily" # daily, hourly, or size-only

# Retention (how many rotated files to keep)
LOG_MAX_BACKUP_COUNT="7"      # Keep 7 days of logs

# Compress rotated logs
LOG_COMPRESS_ROTATED="true"   # Compress to .gz

# Delete old logs after retention period
LOG_AUTO_DELETE_OLD="true"
LOG_RETENTION_DAYS="7"        # Delete logs older than 7 days

# Pattern for rotated files
LOG_ROTATION_PATTERN="%d{yyyy-MM-dd}-%i.log.gz"

# ============================================
# Promtail Configuration (Log Shipping)
# ============================================
# Enable Promtail log shipping to Loki
PROMTAIL_ENABLED="true"

# Central Loki server endpoint
LOKI_ENDPOINT="http://grafana-loki-v.1:3100"

# Promtail behavior
PROMTAIL_SCRAPE_INTERVAL="5s"  # How often to check for new logs
PROMTAIL_BATCH_WAIT="1s"       # Wait time before sending batch
PROMTAIL_BATCH_SIZE="1048576"  # 1MB batch size

# Retry configuration
PROMTAIL_RETRY_ENABLED="true"
PROMTAIL_MAX_RETRIES="10"
PROMTAIL_MIN_BACKOFF="500ms"
PROMTAIL_MAX_BACKOFF="5m"
PROMTAIL_TIMEOUT="10s"

# ============================================
# Log Labels (for Loki filtering/querying)
# ============================================
# Labels are attached to all logs sent to Loki
# Format: key=value,key2=value2

# Required labels (automatically set)
# - app: ${APP_NAME}
# - container: ${CONTAINER_NAME}
# - env: ${DEPLOYMENT_ENV}

# Additional custom labels
LOG_LABELS_CUSTOM="team=backend,component=api,version=${APP_VERSION}"

# Combined labels (auto-generated at runtime)
# LOG_LABELS="app=${APP_NAME},container=${CONTAINER_NAME},env=${DEPLOYMENT_ENV},${LOG_LABELS_CUSTOM}"

# ============================================
# Logging Framework Configuration
# ============================================
# Log4j2 configuration file
LOG4J2_CONFIG_FILE="/etc/quarkus/log4j2.xml"

# Async logging (high performance)
LOG4J2_ASYNC_ENABLED="true"
LOG4J2_ASYNC_QUEUE_SIZE="256"

# Context selector for async logging
LOG4J2_CONTEXT_SELECTOR="org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"

# ============================================
# Log Content Configuration
# ============================================
# Include stack traces for errors
LOG_INCLUDE_STACKTRACE="true"

# Include thread name in logs
LOG_INCLUDE_THREAD="true"

# Include MDC (Mapped Diagnostic Context)
LOG_INCLUDE_MDC="true"

# Include location info (file, line number)
# WARNING: Impacts performance, use in dev only
LOG_INCLUDE_LOCATION="false"

# ============================================
# Special Log Categories
# ============================================
# Access logs (HTTP requests)
ACCESS_LOG_ENABLED="true"
ACCESS_LOG_FILE="/var/log/quarkus/access.log"
ACCESS_LOG_FORMAT="combined"  # combined, common, or custom

# Audit logs (security/compliance)
AUDIT_LOG_ENABLED="false"
AUDIT_LOG_FILE="/var/log/quarkus/audit.log"

# Error-only log file (separate file for errors)
ERROR_LOG_ENABLED="false"
ERROR_LOG_FILE="/var/log/quarkus/error.log"

# ============================================
# Performance Logging
# ============================================
# Log slow operations
SLOW_LOG_ENABLED="false"
SLOW_LOG_THRESHOLD_MS="1000"  # Log operations slower than 1 second

# Log SQL queries (if using database)
SQL_LOG_ENABLED="false"
SQL_LOG_SLOW_QUERIES="true"
SQL_LOG_SLOW_THRESHOLD_MS="500"

# ============================================
# Development/Debug Logging
# ============================================
# Enable detailed logging in development
# (Overrides LOG_LEVEL when DEPLOYMENT_ENV=development)
DEV_LOG_LEVEL="DEBUG"
DEV_LOG_VERBOSE="true"

# Log startup information
LOG_STARTUP_INFO="true"

# Log configuration on startup
LOG_CONFIG_ON_STARTUP="false"

# ============================================
# Log Sampling (reduce log volume in production)
# ============================================
# Sample logs to reduce volume (1.0 = 100%, 0.5 = 50%)
LOG_SAMPLING_ENABLED="false"
LOG_SAMPLING_RATE="1.0"       # 1.0 = log everything

# ============================================
# Storage-Aware Logging
# ============================================
# These trigger actions when storage quota is reached
# (Configured in BTRFS storage monitoring)

# Pause logging when storage reaches threshold
LOG_PAUSE_AT_QUOTA_PERCENT="95"

# Reduce log level when storage is critical
LOG_REDUCE_LEVEL_AT_PERCENT="90"
LOG_REDUCED_LEVEL="WARN"      # Change to WARN when storage critical

# Emergency cleanup of old logs
LOG_EMERGENCY_CLEANUP_AT_PERCENT="95"

# ============================================
# Environment Variables
# ============================================
# Comma-separated list of env vars
ENV_VARS="QUARKUS_PROFILE=prod,APP_ENV=production,TZ=UTC"

# ============================================
# Secrets & Config Files
# ============================================
# Mount secrets directory from host
MOUNT_SECRETS="false"
# SECRETS_SOURCE="/home/user/myapp-secrets"
# SECRETS_DEST="/run/secrets"

# Mount application.properties from host
MOUNT_CONFIG="false"
# CONFIG_SOURCE="/home/user/myapp-config/application.properties"
# CONFIG_DEST="/etc/quarkus/application.properties"

# ============================================
# Service Management
# ============================================
ENABLE_SYSTEMD_SERVICE="true"  # Create myapp.service
AUTO_START_ON_BOOT="true"
RESTART_POLICY="on-failure"
RESTART_DELAY="10s"

# ============================================
# Health Checks (Inherits from base)
# ============================================
HEALTH_CHECK_ENABLED="true"
HEALTH_ENDPOINT="/q/health/live"
READINESS_ENDPOINT="/q/health/ready"

# ============================================
# Metrics (Inherits from base)
# ============================================
METRICS_ENABLED="true"
METRICS_ENDPOINT="/q/metrics"
METRICS_PORT="9000"

# ============================================
# Network Port Forwarding
# ============================================
# Ports to expose from container to host
EXPOSE_PORTS="8080,9000"

# ============================================
# Build Options
# ============================================
CLEAN_BUILD="true"             # Remove existing container
EXPORT_CONTAINER="true"        # Export as tarball
EXPORT_PATH="/tmp"
CREATE_SNAPSHOT="true"
START_AFTER_BUILD="true"

# ============================================
# Deployment
# ============================================
# Target environment for this build
DEPLOYMENT_ENV="production"    # development, staging, production

# ============================================
# Versioning & Metadata
# ============================================
BUILD_DATE="$(date +%Y%m%d)"
GIT_COMMIT="$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')"
GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo 'unknown')"
BUILT_BY="$(whoami)"

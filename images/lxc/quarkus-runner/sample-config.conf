# ============================================
# Sample App Container Configuration
# ============================================
# This is a SAMPLE showing how to build an app container
# that extends the quarkus-runner-base
#
# Copy this file and customize for your application:
#   cp sample-config.conf configs/myapp-build.conf

# ============================================
# Base Container Reference
# ============================================
# Which base container to extend from
BASE_CONTAINER="quarkus-runner-base"
BASE_VERSION="1"
BUILD_TYPE="app"  # This is an app build, not base

# ============================================
# Application Identity
# ============================================
APP_NAME="myapp"
APP_VERSION="1.0.0"
APP_DESCRIPTION="My Quarkus Application"

# Where is your JAR file?
APP_JAR_PATH="/path/to/myapp/target/myapp-runner.jar"
# Or for native executable:
# APP_NATIVE_PATH="/path/to/myapp/target/myapp-runner"
# PACKAGE_TYPE="native"

# ============================================
# Storage (MANDATORY - inherits BTRFS from base)
# ============================================
STORAGE_LOCATION_ID="btrfs_ssd_main"
STORAGE_QUOTA_SIZE="5G"        # App-specific quota
STORAGE_ROTATION_THRESHOLD="80"

# ============================================
# Memory & CPU (App-specific sizing)
# ============================================
MEMORY_LIMIT="1GB"             # Override base default
CPU_LIMIT="1"

# JVM heap auto-calculated as 75% of MEMORY_LIMIT
# Or specify manually:
# JVM_MAX_HEAP="768m"

# ============================================
# Application Runtime
# ============================================
QUARKUS_PROFILE="prod"         # dev, test, prod
QUARKUS_HTTP_PORT="8080"
QUARKUS_HTTPS_PORT="8443"

# Main class (optional, usually auto-detected)
# APP_MAIN_CLASS="com.company.myapp.Main"

# ============================================
# Database Configuration (Optional)
# ============================================
ENABLE_DATABASE="false"
# DATABASE_TYPE="postgresql"
# DATABASE_HOST="postgres-container"
# DATABASE_PORT="5432"
# DATABASE_NAME="myappdb"
# DATABASE_CREDENTIALS_FILE="/run/secrets/myapp-db-credentials"

# ============================================
# Logging Configuration (Complete)
# ============================================
# All Java apps use: SLF4J API + Log4j2 implementation

# ============================================
# Local Logging (Log4j2)
# ============================================
# Root log level
LOG_LEVEL="INFO"              # DEBUG, INFO, WARN, ERROR

# Package-specific log levels (comma-separated)
# Format: package=level,package2=level2
LOG_PACKAGE_LEVELS="com.yourcompany=DEBUG,io.quarkus=INFO,org.hibernate=WARN"

# Log format
LOG_FORMAT="json"             # json or text (json required for Loki)

# Log file location
LOG_DIR="/var/log/quarkus"
LOG_FILE_NAME="application.log"
LOG_FILE_PATH="${LOG_DIR}/${LOG_FILE_NAME}"

# Console logging (for debugging)
LOG_CONSOLE_ENABLED="true"
LOG_CONSOLE_FORMAT="text"    # text for human-readable console

# ============================================
# Log Rotation (Log4j2 built-in)
# ============================================
# Enable automatic rotation
LOG_ROTATION_ENABLED="true"

# Size-based rotation
LOG_MAX_FILE_SIZE="100MB"     # Rotate when file reaches this size

# Time-based rotation
LOG_ROTATION_INTERVAL="daily" # daily, hourly, or size-only

# Retention (how many rotated files to keep)
LOG_MAX_BACKUP_COUNT="7"      # Keep 7 days of logs

# Compress rotated logs
LOG_COMPRESS_ROTATED="true"   # Compress to .gz

# Delete old logs after retention period
LOG_AUTO_DELETE_OLD="true"
LOG_RETENTION_DAYS="7"        # Delete logs older than 7 days

# Pattern for rotated files
LOG_ROTATION_PATTERN="%d{yyyy-MM-dd}-%i.log.gz"

# ============================================
# Promtail Configuration (Log Shipping)
# ============================================
# Enable Promtail log shipping to Loki
PROMTAIL_ENABLED="true"

# ============================================
# Loki Server Configuration
# ============================================
# Loki server endpoint (REQUIRED)
LOKI_SERVER_HOST="grafana-loki-v.1"     # Hostname or IP
LOKI_SERVER_PORT="3100"                 # Default Loki port
LOKI_SERVER_PROTOCOL="http"             # http or https

# Full endpoint URL (auto-constructed from above)
LOKI_ENDPOINT="${LOKI_SERVER_PROTOCOL}://${LOKI_SERVER_HOST}:${LOKI_SERVER_PORT}"

# Loki API path
LOKI_PUSH_PATH="/loki/api/v1/push"      # Standard Loki push endpoint

# Full URL (auto-constructed)
LOKI_PUSH_URL="${LOKI_ENDPOINT}${LOKI_PUSH_PATH}"

# ============================================
# Authentication & Security
# ============================================
# Authentication type
LOKI_AUTH_ENABLED="false"               # Enable authentication
LOKI_AUTH_TYPE="none"                   # none, basic, bearer, oauth2

# Basic Authentication (username/password)
LOKI_BASIC_AUTH_USERNAME=""             # Username for basic auth
LOKI_BASIC_AUTH_PASSWORD=""             # Password for basic auth
# Or use password file (more secure)
LOKI_BASIC_AUTH_PASSWORD_FILE=""        # Path to file containing password

# Bearer Token Authentication (API token)
LOKI_BEARER_TOKEN=""                    # Bearer token
LOKI_BEARER_TOKEN_FILE=""               # Path to file containing token

# OAuth2 Authentication
LOKI_OAUTH2_CLIENT_ID=""
LOKI_OAUTH2_CLIENT_SECRET=""
LOKI_OAUTH2_CLIENT_SECRET_FILE=""
LOKI_OAUTH2_TOKEN_URL=""
LOKI_OAUTH2_SCOPES=""

# Custom HTTP Headers (for authentication or routing)
# Format: key1:value1,key2:value2
LOKI_CUSTOM_HEADERS=""
# Example: "X-Scope-OrgID:tenant1,Authorization:Bearer token123"

# ============================================
# TLS/SSL Configuration
# ============================================
# Enable TLS/SSL
LOKI_TLS_ENABLED="false"                # Use HTTPS

# TLS certificate verification
LOKI_TLS_VERIFY="true"                  # Verify server certificate
LOKI_TLS_INSECURE_SKIP_VERIFY="false"   # Skip verification (insecure!)

# Client certificates (mutual TLS)
LOKI_TLS_CERT_FILE=""                   # Client certificate
LOKI_TLS_KEY_FILE=""                    # Client private key
LOKI_TLS_CA_FILE=""                     # CA certificate for verification

# ============================================
# Multi-Tenant Configuration
# ============================================
# Tenant ID (for multi-tenant Loki deployments)
LOKI_TENANT_ID=""                       # X-Scope-OrgID header value
# If set, adds X-Scope-OrgID header to all requests

# ============================================
# Promtail Behavior
# ============================================
# Scraping behavior
PROMTAIL_SCRAPE_INTERVAL="5s"           # How often to check for new logs

# Batching configuration
PROMTAIL_BATCH_WAIT="1s"                # Wait time before sending batch
PROMTAIL_BATCH_SIZE="1048576"           # 1MB batch size (1048576 bytes)
PROMTAIL_MIN_BATCH_SIZE="102400"        # Minimum 100KB before sending

# Timeout configuration
PROMTAIL_TIMEOUT="10s"                  # HTTP request timeout

# ============================================
# Retry & Backoff Configuration
# ============================================
# Enable retry on failure
PROMTAIL_RETRY_ENABLED="true"

# Retry limits
PROMTAIL_MAX_RETRIES="10"               # Max retry attempts
PROMTAIL_RETRY_ON_HTTP_429="true"       # Retry on rate limit

# Backoff configuration (exponential backoff)
PROMTAIL_MIN_BACKOFF="500ms"            # Initial retry delay
PROMTAIL_MAX_BACKOFF="5m"               # Maximum retry delay

# ============================================
# Network & Connection
# ============================================
# Connection pooling
PROMTAIL_MAX_IDLE_CONNS="100"           # Max idle connections
PROMTAIL_MAX_CONNS_PER_HOST="10"        # Max connections per host

# Proxy configuration
PROMTAIL_PROXY_URL=""                   # HTTP/HTTPS proxy URL
# Example: "http://proxy.company.com:8080"

# ============================================
# Compression
# ============================================
# Compress logs before sending (reduces bandwidth)
PROMTAIL_COMPRESSION_ENABLED="true"     # Enable compression
PROMTAIL_COMPRESSION_TYPE="gzip"        # gzip or snappy

# ============================================
# External Labels (Applied to all logs)
# ============================================
# These labels are added to EVERY log entry sent to Loki
# Useful for identifying the source

# Automatic labels (set by container automation)
PROMTAIL_EXTERNAL_LABEL_APP="${APP_NAME}"
PROMTAIL_EXTERNAL_LABEL_CONTAINER="${CONTAINER_NAME}"
PROMTAIL_EXTERNAL_LABEL_ENV="${DEPLOYMENT_ENV}"
PROMTAIL_EXTERNAL_LABEL_HOST="$(hostname)"

# Additional external labels
PROMTAIL_EXTERNAL_LABELS_CUSTOM=""
# Format: label1=value1,label2=value2
# Example: "datacenter=us-east,cluster=prod"

# ============================================
# Grafana Configuration (UI Access)
# ============================================
# Grafana has separate authentication from Loki
# Users access Grafana UI to view logs, while Promtail pushes to Loki API

# ============================================
# Grafana Server Configuration
# ============================================
# Grafana UI endpoint
GRAFANA_SERVER_HOST="grafana-loki-v.1"  # Same container as Loki, different port
GRAFANA_SERVER_PORT="3000"              # Default Grafana port
GRAFANA_SERVER_PROTOCOL="http"          # http or https

# Full Grafana URL
GRAFANA_URL="${GRAFANA_SERVER_PROTOCOL}://${GRAFANA_SERVER_HOST}:${GRAFANA_SERVER_PORT}"

# ============================================
# Grafana Authentication (for API access)
# ============================================
# Grafana authentication (if app needs to create dashboards, alerts, etc.)
GRAFANA_AUTH_ENABLED="false"            # Enable Grafana API authentication
GRAFANA_AUTH_TYPE="none"                # none, basic, api_key, service_account

# Basic Authentication (admin user)
GRAFANA_ADMIN_USERNAME="admin"
GRAFANA_ADMIN_PASSWORD=""               # Admin password
GRAFANA_ADMIN_PASSWORD_FILE=""          # Or from file: /run/secrets/grafana-admin-password

# API Key Authentication (recommended for automation)
GRAFANA_API_KEY=""                      # API key for programmatic access
GRAFANA_API_KEY_FILE=""                 # Or from file: /run/secrets/grafana-api-key

# Service Account Token (Grafana 9.1+, most secure)
GRAFANA_SERVICE_ACCOUNT_TOKEN=""
GRAFANA_SERVICE_ACCOUNT_TOKEN_FILE=""   # Or from file: /run/secrets/grafana-sa-token

# ============================================
# Grafana User Configuration (for UI login)
# ============================================
# Create application-specific Grafana user (optional)
GRAFANA_CREATE_APP_USER="false"         # Auto-create user for this app
GRAFANA_APP_USER_USERNAME="${APP_NAME}-user"
GRAFANA_APP_USER_PASSWORD=""
GRAFANA_APP_USER_PASSWORD_FILE=""
GRAFANA_APP_USER_EMAIL="${APP_NAME}@company.com"
GRAFANA_APP_USER_ROLE="Viewer"          # Viewer, Editor, or Admin

# ============================================
# Grafana Organization & Permissions
# ============================================
# Organization (for multi-tenant Grafana)
GRAFANA_ORG_ID="1"                      # Default organization
GRAFANA_ORG_NAME="Main Org."

# Folder for dashboards
GRAFANA_FOLDER_NAME="${APP_NAME}-dashboards"
GRAFANA_FOLDER_UID=""                   # Auto-generated if empty

# ============================================
# Grafana Dashboard Auto-Provisioning
# ============================================
# Automatically create dashboard for this app
GRAFANA_AUTO_CREATE_DASHBOARD="false"
GRAFANA_DASHBOARD_TITLE="${APP_NAME} Logs"
GRAFANA_DASHBOARD_UID="${APP_NAME}-logs"

# Dashboard data source
GRAFANA_DATASOURCE_NAME="Loki"          # Loki datasource name in Grafana
GRAFANA_DATASOURCE_UID="loki"           # Datasource UID

# ============================================
# Grafana Alerting Configuration
# ============================================
# Auto-create alert rules for this app
GRAFANA_AUTO_CREATE_ALERTS="false"

# Alert on error logs
GRAFANA_ALERT_ON_ERRORS="false"
GRAFANA_ALERT_ERROR_THRESHOLD="10"      # Alert if > 10 errors in 5 minutes
GRAFANA_ALERT_ERROR_QUERY='{app="${APP_NAME}", level="ERROR"}'

# Alert notification channels
GRAFANA_ALERT_CHANNELS=""               # Comma-separated channel IDs or names
# Example: "email-ops,slack-alerts,pagerduty"

# ============================================
# Grafana TLS/SSL Configuration
# ============================================
GRAFANA_TLS_ENABLED="false"             # Use HTTPS for Grafana
GRAFANA_TLS_VERIFY="true"               # Verify Grafana certificate
GRAFANA_TLS_CERT_FILE=""                # Client cert (if mutual TLS)
GRAFANA_TLS_KEY_FILE=""
GRAFANA_TLS_CA_FILE=""

# ============================================
# Grafana Proxy Configuration
# ============================================
GRAFANA_PROXY_URL=""                    # Proxy for Grafana access

# ============================================
# Secret Management (Both Loki & Grafana)
# ============================================
# Centralized secrets configuration for all authentication

# Enable secrets from files (recommended for production)
USE_SECRETS_FROM_FILES="true"

# Secrets directory (mounted from host)
SECRETS_DIR="/run/secrets"

# Individual secret file names (in SECRETS_DIR)
SECRET_LOKI_PASSWORD="loki-password"
SECRET_LOKI_TOKEN="loki-token"
SECRET_LOKI_OAUTH_SECRET="loki-oauth-secret"
SECRET_GRAFANA_ADMIN_PASSWORD="grafana-admin-password"
SECRET_GRAFANA_API_KEY="grafana-api-key"
SECRET_GRAFANA_SA_TOKEN="grafana-service-account-token"
SECRET_GRAFANA_APP_USER_PASSWORD="grafana-app-user-password"

# TLS secrets
SECRET_TLS_CLIENT_CERT="tls-client-cert.pem"
SECRET_TLS_CLIENT_KEY="tls-client-key.pem"
SECRET_TLS_CA_CERT="tls-ca-cert.pem"

# Auto-construct secret paths
# These are automatically set if USE_SECRETS_FROM_FILES=true
# LOKI_BASIC_AUTH_PASSWORD_FILE="${SECRETS_DIR}/${SECRET_LOKI_PASSWORD}"
# LOKI_BEARER_TOKEN_FILE="${SECRETS_DIR}/${SECRET_LOKI_TOKEN}"
# GRAFANA_ADMIN_PASSWORD_FILE="${SECRETS_DIR}/${SECRET_GRAFANA_ADMIN_PASSWORD}"
# GRAFANA_API_KEY_FILE="${SECRETS_DIR}/${SECRET_GRAFANA_API_KEY}"
# etc.

# ============================================
# Log Labels (for Loki filtering/querying)
# ============================================
# Labels are attached to all logs sent to Loki
# Format: key=value,key2=value2

# Required labels (automatically set)
# - app: ${APP_NAME}
# - container: ${CONTAINER_NAME}
# - env: ${DEPLOYMENT_ENV}

# Additional custom labels
LOG_LABELS_CUSTOM="team=backend,component=api,version=${APP_VERSION}"

# Combined labels (auto-generated at runtime)
# LOG_LABELS="app=${APP_NAME},container=${CONTAINER_NAME},env=${DEPLOYMENT_ENV},${LOG_LABELS_CUSTOM}"

# ============================================
# Logging Framework Configuration
# ============================================
# Log4j2 configuration file
LOG4J2_CONFIG_FILE="/etc/quarkus/log4j2.xml"

# Async logging (high performance)
LOG4J2_ASYNC_ENABLED="true"
LOG4J2_ASYNC_QUEUE_SIZE="256"

# Context selector for async logging
LOG4J2_CONTEXT_SELECTOR="org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"

# ============================================
# Log Content Configuration
# ============================================
# Include stack traces for errors
LOG_INCLUDE_STACKTRACE="true"

# Include thread name in logs
LOG_INCLUDE_THREAD="true"

# Include MDC (Mapped Diagnostic Context)
LOG_INCLUDE_MDC="true"

# Include location info (file, line number)
# WARNING: Impacts performance, use in dev only
LOG_INCLUDE_LOCATION="false"

# ============================================
# Special Log Categories
# ============================================
# Access logs (HTTP requests)
ACCESS_LOG_ENABLED="true"
ACCESS_LOG_FILE="/var/log/quarkus/access.log"
ACCESS_LOG_FORMAT="combined"  # combined, common, or custom

# Audit logs (security/compliance)
AUDIT_LOG_ENABLED="false"
AUDIT_LOG_FILE="/var/log/quarkus/audit.log"

# Error-only log file (separate file for errors)
ERROR_LOG_ENABLED="false"
ERROR_LOG_FILE="/var/log/quarkus/error.log"

# ============================================
# Performance Logging
# ============================================
# Log slow operations
SLOW_LOG_ENABLED="false"
SLOW_LOG_THRESHOLD_MS="1000"  # Log operations slower than 1 second

# Log SQL queries (if using database)
SQL_LOG_ENABLED="false"
SQL_LOG_SLOW_QUERIES="true"
SQL_LOG_SLOW_THRESHOLD_MS="500"

# ============================================
# Development/Debug Logging
# ============================================
# Enable detailed logging in development
# (Overrides LOG_LEVEL when DEPLOYMENT_ENV=development)
DEV_LOG_LEVEL="DEBUG"
DEV_LOG_VERBOSE="true"

# Log startup information
LOG_STARTUP_INFO="true"

# Log configuration on startup
LOG_CONFIG_ON_STARTUP="false"

# ============================================
# Log Sampling (reduce log volume in production)
# ============================================
# Sample logs to reduce volume (1.0 = 100%, 0.5 = 50%)
LOG_SAMPLING_ENABLED="false"
LOG_SAMPLING_RATE="1.0"       # 1.0 = log everything

# ============================================
# Storage-Aware Logging
# ============================================
# These trigger actions when storage quota is reached
# (Configured in BTRFS storage monitoring)

# Pause logging when storage reaches threshold
LOG_PAUSE_AT_QUOTA_PERCENT="95"

# Reduce log level when storage is critical
LOG_REDUCE_LEVEL_AT_PERCENT="90"
LOG_REDUCED_LEVEL="WARN"      # Change to WARN when storage critical

# Emergency cleanup of old logs
LOG_EMERGENCY_CLEANUP_AT_PERCENT="95"

# ============================================
# Environment Variables
# ============================================
# Comma-separated list of env vars
ENV_VARS="QUARKUS_PROFILE=prod,APP_ENV=production,TZ=UTC"

# ============================================
# Secrets & Config Files
# ============================================
# Mount secrets directory from host
MOUNT_SECRETS="false"
# SECRETS_SOURCE="/home/user/myapp-secrets"
# SECRETS_DEST="/run/secrets"

# Mount application.properties from host
MOUNT_CONFIG="false"
# CONFIG_SOURCE="/home/user/myapp-config/application.properties"
# CONFIG_DEST="/etc/quarkus/application.properties"

# ============================================
# Service Management
# ============================================
ENABLE_SYSTEMD_SERVICE="true"  # Create myapp.service
AUTO_START_ON_BOOT="true"
RESTART_POLICY="on-failure"
RESTART_DELAY="10s"

# ============================================
# Health Checks (Inherits from base)
# ============================================
HEALTH_CHECK_ENABLED="true"
HEALTH_ENDPOINT="/q/health/live"
READINESS_ENDPOINT="/q/health/ready"

# ============================================
# Metrics (Inherits from base)
# ============================================
METRICS_ENABLED="true"
METRICS_ENDPOINT="/q/metrics"
METRICS_PORT="9000"

# ============================================
# Network Port Forwarding
# ============================================
# Ports to expose from container to host
EXPOSE_PORTS="8080,9000"

# ============================================
# Build Options
# ============================================
CLEAN_BUILD="true"             # Remove existing container
EXPORT_CONTAINER="true"        # Export as tarball
EXPORT_PATH="/tmp"
CREATE_SNAPSHOT="true"
START_AFTER_BUILD="true"

# ============================================
# Deployment
# ============================================
# Target environment for this build
DEPLOYMENT_ENV="production"    # development, staging, production

# ============================================
# Versioning & Metadata
# ============================================
BUILD_DATE="$(date +%Y%m%d)"
GIT_COMMIT="$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')"
GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo 'unknown')"
BUILT_BY="$(whoami)"

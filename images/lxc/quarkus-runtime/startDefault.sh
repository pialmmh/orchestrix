#!/bin/bash
set -e

# ============================================
# Quarkus Runtime - Quick Start Script
# ============================================
# This script helps you quickly build and test a Quarkus container
#
# BEFORE RUNNING:
# 1. Edit build/build.conf and set your APP_NAME and APP_JAR_PATH
# 2. Ensure your Quarkus JAR is already built
#
# This script will:
# 1. Build the container image
# 2. Launch a test instance
# 3. Show you how to access it

echo "=========================================="
echo "Quarkus Runtime - Quick Start"
echo "=========================================="
echo ""

# Check if build.conf has been edited
if grep -q "/path/to/your/app.jar" build/build.conf; then
    echo "ERROR: build/build.conf has not been configured yet!"
    echo ""
    echo "Please edit build/build.conf and set:"
    echo "  1. APP_NAME (e.g., 'infinite-scheduler' or 'routesphere')"
    echo "  2. APP_JAR_PATH (path to your built JAR file)"
    echo "  3. MEMORY_LIMIT, CPU_LIMIT, APP_PORT (adjust as needed)"
    echo ""
    echo "Example:"
    echo "  APP_NAME=\"infinite-scheduler\""
    echo "  APP_JAR_PATH=\"/home/mustafa/telcobright-projects/routesphere/infinite-scheduler/target/infinite-scheduler-1.0.0.jar\""
    echo ""
    exit 1
fi

# Load APP_NAME from config
source build/build.conf

if [ -z "$APP_NAME" ] || [ "$APP_NAME" = "my-quarkus-app" ]; then
    echo "ERROR: Please set a real APP_NAME in build/build.conf"
    echo "Current value: '$APP_NAME'"
    exit 1
fi

if [ ! -f "$APP_JAR_PATH" ]; then
    echo "ERROR: JAR file not found: $APP_JAR_PATH"
    echo ""
    echo "Please build your Quarkus application first:"
    echo "  cd /path/to/your/quarkus/project"
    echo "  mvn clean package"
    echo ""
    exit 1
fi

echo "Configuration loaded:"
echo "  App Name: $APP_NAME"
echo "  JAR Path: $APP_JAR_PATH"
echo "  Resources: ${MEMORY_LIMIT}, ${CPU_LIMIT} CPU"
echo ""

read -p "Continue with build? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Aborted."
    exit 1
fi

# ============================================
# STEP 1: BUILD CONTAINER
# ============================================
echo ""
echo "=========================================="
echo "STEP 1: Building container..."
echo "=========================================="

./build/build.sh

if [ $? -ne 0 ]; then
    echo ""
    echo "ERROR: Build failed!"
    exit 1
fi

# Find the exported image
EXPORTED_IMAGE=$(find "${APP_NAME}-v.${CONTAINER_VERSION}/generated/artifact/" -name "*.tar.gz" 2>/dev/null | sort -r | head -1)

if [ -z "$EXPORTED_IMAGE" ]; then
    echo "ERROR: Could not find exported container image"
    exit 1
fi

IMAGE_FILENAME=$(basename "$EXPORTED_IMAGE")
echo ""
echo "✓ Container image built: $IMAGE_FILENAME"

# ============================================
# STEP 2: CREATE TEST LAUNCH CONFIG
# ============================================
echo ""
echo "=========================================="
echo "STEP 2: Creating test launch config..."
echo "=========================================="

mkdir -p configs
TEST_CONFIG="configs/${APP_NAME}-test.conf"

cat > "$TEST_CONFIG" << EOF
# ============================================
# Test Launch Configuration for ${APP_NAME}
# ============================================
# Auto-generated by startDefault.sh

# Instance Identity
INSTANCE_NAME="${APP_NAME}-test-1"
CONTAINER_IMAGE="$IMAGE_FILENAME"

# Network Configuration
HOST_PORT_APP="$APP_PORT"
CONTAINER_PORT_APP="$APP_PORT"
HOST_PORT_PROMTAIL="$PROMTAIL_PORT"
CONTAINER_PORT_PROMTAIL="$PROMTAIL_PORT"
STATIC_IP=""  # Use DHCP for test

# Logging Configuration
LOKI_HOST="$LOKI_HOST"
LOKI_PORT="$LOKI_PORT"
LOG_LEVEL="INFO"

# Resource Limits
MEMORY_LIMIT="$MEMORY_LIMIT"
CPU_LIMIT="$CPU_LIMIT"
STORAGE_QUOTA="$STORAGE_QUOTA_SIZE"

# Bind Mounts (Optional)
MOUNT_BINDS=""

# Environment Variables (Optional)
ENV_VARS=""

# MySQL Configuration (Optional)
MYSQL_ENABLED="false"
MYSQL_HOST="10.10.199.171"
MYSQL_PORT="3306"
MYSQL_DATABASE="${APP_NAME}"
MYSQL_USER="root"
MYSQL_PASSWORD="123456"

# Consul Configuration (Optional)
CONSUL_ENABLED="false"
CONSUL_HOST="localhost"
CONSUL_PORT="8500"
EOF

echo "✓ Test config created: $TEST_CONFIG"

# ============================================
# STEP 3: LAUNCH TEST INSTANCE
# ============================================
echo ""
echo "=========================================="
echo "STEP 3: Launching test instance..."
echo "=========================================="
echo ""

read -p "Launch test instance '${APP_NAME}-test-1'? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Skipped launch. You can launch manually later with:"
    echo "  ./launch.sh $TEST_CONFIG"
    exit 0
fi

./launch.sh "$TEST_CONFIG"

if [ $? -ne 0 ]; then
    echo ""
    echo "ERROR: Launch failed!"
    exit 1
fi

# Get container IP
CONTAINER_IP=$(lxc list "${APP_NAME}-test-1" -c 4 --format csv | cut -d' ' -f1)

# ============================================
# SUCCESS SUMMARY
# ============================================
echo ""
echo "=========================================="
echo "SUCCESS! Container is running"
echo "=========================================="
echo ""
echo "Instance: ${APP_NAME}-test-1"
echo "IP Address: $CONTAINER_IP"
echo "App URL: http://$CONTAINER_IP:$APP_PORT"
echo "Grafana Logs: http://${LOKI_HOST}:3000"
echo ""
echo "=========================================="
echo "USEFUL COMMANDS:"
echo "=========================================="
echo ""
echo "# Test application health:"
echo "curl http://$CONTAINER_IP:$APP_PORT/health"
echo ""
echo "# View application logs:"
echo "lxc exec ${APP_NAME}-test-1 -- journalctl -u ${APP_NAME} -f"
echo ""
echo "# Access container shell:"
echo "lxc exec ${APP_NAME}-test-1 -- bash"
echo ""
echo "# Stop instance:"
echo "lxc stop ${APP_NAME}-test-1"
echo ""
echo "# Delete instance:"
echo "lxc delete ${APP_NAME}-test-1 --force"
echo ""
echo "=========================================="
echo "NEXT STEPS:"
echo "=========================================="
echo ""
echo "1. Test your application endpoints"
echo "2. Check logs in Grafana"
echo "3. For production, create a proper launch config:"
echo "   cp $TEST_CONFIG configs/${APP_NAME}-prod.conf"
echo "   # Edit configs/${APP_NAME}-prod.conf"
echo "   # Set INSTANCE_NAME, STATIC_IP, MYSQL_ENABLED, etc."
echo "   ./launch.sh configs/${APP_NAME}-prod.conf"
echo ""
echo "=========================================="

pipeline {
    agent { 
        label 'orchestrix-agent'  // Your local PC agent
    }
    
    parameters {
        string(
            name: 'VERSION',
            defaultValue: '1.0.0',
            description: 'Version number for this build (e.g., 1.0.0, 2.1.3)'
        )
        choice(
            name: 'BUILD_TYPE',
            choices: ['RELEASE', 'SNAPSHOT', 'DEVELOPMENT'],
            description: 'Type of build'
        )
        booleanParam(
            name: 'CLEAN_BUILD',
            defaultValue: true,
            description: 'Delete existing container and start fresh'
        )
        booleanParam(
            name: 'UPLOAD_TO_GDRIVE',
            defaultValue: true,
            description: 'Upload backup to Google Drive after build'
        )
        booleanParam(
            name: 'KEEP_CONTAINER_RUNNING',
            defaultValue: true,
            description: 'Keep container running after build'
        )
        text(
            name: 'RELEASE_NOTES',
            defaultValue: '',
            description: 'Release notes or comments for this version'
        )
    }
    
    options {
        timestamps()
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
    }
    
    environment {
        BUILD_DIR = '/home/mustafa/telcobright-projects/orchestrix/images/lxc/clarity'
        CONTAINER_NAME = 'clarity'
        BUILD_VERSION = "${params.VERSION}-${params.BUILD_TYPE}"
        BUILD_TAG = "${params.VERSION}-${params.BUILD_TYPE}-build${env.BUILD_NUMBER}"
        BUILD_DATE = sh(returnStdout: true, script: 'date +%Y%m%d-%H%M%S').trim()
        BACKUP_FILENAME = "clarity-v${params.VERSION}-${params.BUILD_TYPE}-${BUILD_DATE}.tar.gz"
    }
    
    stages {
        stage('Build Information') {
            steps {
                echo """
                ====================================
                🚀 Clarity LXC Container Build
                ====================================
                Version: ${BUILD_VERSION}
                Build Tag: ${BUILD_TAG}
                Build Number: ${env.BUILD_NUMBER}
                Build Type: ${params.BUILD_TYPE}
                Clean Build: ${params.CLEAN_BUILD}
                Upload to GDrive: ${params.UPLOAD_TO_GDRIVE}
                Timestamp: ${BUILD_DATE}
                ====================================
                """
                
                script {
                    if (params.RELEASE_NOTES) {
                        echo "Release Notes:\n${params.RELEASE_NOTES}"
                    }
                }
            }
        }
        
        stage('Pre-Build Validation') {
            steps {
                sh '''
                    echo "Validating environment..."
                    
                    # Check if build script exists
                    if [ ! -f "${BUILD_DIR}/buildClarity.sh" ]; then
                        echo "Error: Build script not found!"
                        exit 1
                    fi
                    
                    # Check LXC/LXD
                    if ! command -v lxc &> /dev/null; then
                        echo "Error: LXC not installed!"
                        exit 1
                    fi
                    
                    # Check rclone if upload is enabled
                    if [ "${UPLOAD_TO_GDRIVE}" = "true" ]; then
                        if ! command -v rclone &> /dev/null; then
                            echo "Error: rclone not installed!"
                            exit 1
                        fi
                        
                        if ! rclone listremotes | grep -q "pialmmhtb:"; then
                            echo "Error: rclone remote 'pialmmhtb' not configured!"
                            exit 1
                        fi
                    fi
                    
                    echo "✅ All validations passed"
                '''
            }
        }
        
        stage('Version Management') {
            steps {
                sh '''
                    cd ${BUILD_DIR}
                    
                    # Create version file
                    cat > VERSION << EOF
                    VERSION=${VERSION}
                    BUILD_TYPE=${BUILD_TYPE}
                    BUILD_NUMBER=${BUILD_NUMBER}
                    BUILD_TAG=${BUILD_TAG}
                    BUILD_DATE=${BUILD_DATE}
                    JENKINS_URL=${JENKINS_URL}
                    JOB_NAME=${JOB_NAME}
                    EOF
                    
                    echo "Version file created"
                    
                    # Create or update version history
                    echo "${BUILD_DATE} | ${BUILD_TAG} | ${BUILD_TYPE} | ${JOB_NAME}/${BUILD_NUMBER}" >> version_history.log
                '''
            }
        }
        
        stage('Backup Existing Container') {
            when {
                expression { 
                    sh(returnStatus: true, script: 'sudo lxc list | grep -q "^| clarity "') == 0
                }
            }
            steps {
                echo "Backing up existing container before rebuild..."
                sh '''
                    cd ${BUILD_DIR}
                    
                    # Create pre-build backup
                    PREBUILD_BACKUP="clarity-prebuild-${BUILD_DATE}.tar.gz"
                    echo "Creating pre-build backup: ${PREBUILD_BACKUP}"
                    
                    sudo lxc stop ${CONTAINER_NAME} --force 2>/dev/null || true
                    sudo lxc export ${CONTAINER_NAME} "${PREBUILD_BACKUP}"
                    
                    # Move to archives
                    mkdir -p archives/pre-build
                    mv "${PREBUILD_BACKUP}" archives/pre-build/
                    
                    echo "Pre-build backup saved to archives/pre-build/"
                '''
            }
        }
        
        stage('Build LXC Container') {
            steps {
                echo "Building Clarity LXC container version ${BUILD_VERSION}..."
                sh '''
                    cd ${BUILD_DIR}
                    
                    # Update config with version info
                    sed -i "s/BUILD_VERSION=.*/BUILD_VERSION=\\"${BUILD_VERSION}\\"/" buildClarityConfig.cnf
                    sed -i "s/BUILD_TIMESTAMP=.*/BUILD_TIMESTAMP=\\"${BUILD_DATE}\\"/" buildClarityConfig.cnf
                    
                    # Make script executable
                    chmod +x buildClarity.sh
                    
                    # Run build based on CLEAN_BUILD parameter
                    if [ "${CLEAN_BUILD}" = "true" ]; then
                        echo "Running clean build (removing existing container)..."
                        sudo ./buildClarity.sh --overwrite
                    else
                        echo "Running incremental build..."
                        sudo ./buildClarity.sh
                    fi
                    
                    # The script creates its own backup, rename it to our versioned name
                    LATEST_BACKUP=$(ls -t clarity-*.tar.gz | head -1)
                    if [ -f "${LATEST_BACKUP}" ]; then
                        mv "${LATEST_BACKUP}" "${BACKUP_FILENAME}"
                        echo "Backup renamed to: ${BACKUP_FILENAME}"
                    fi
                '''
            }
        }
        
        stage('Verify Container Health') {
            steps {
                echo "Verifying container is running properly..."
                retry(3) {
                    sh '''
                        # Check container status
                        echo "Container status:"
                        sudo lxc list ${CONTAINER_NAME}
                        
                        # Get container IP
                        CONTAINER_IP=$(sudo lxc list ${CONTAINER_NAME} --format=json | jq -r '.[0].state.network.eth0.addresses[] | select(.family=="inet").address')
                        echo "Container IP: ${CONTAINER_IP}"
                        
                        # Wait for services to be ready
                        sleep 10
                        
                        # Check Prometheus
                        echo "Testing Prometheus..."
                        if curl -f --retry 3 --retry-delay 5 http://${CONTAINER_IP}:9090/-/healthy; then
                            echo "✅ Prometheus is healthy"
                        else
                            curl -f --retry 3 --retry-delay 5 http://${CONTAINER_IP}:9090/api/v1/query?query=up
                        fi
                        
                        # Check Grafana
                        echo "Testing Grafana..."
                        curl -f --retry 3 --retry-delay 5 http://${CONTAINER_IP}:3300/api/health
                        echo "✅ Grafana is healthy"
                        
                        echo "All services are healthy!"
                    '''
                }
            }
        }
        
        stage('Create Version Metadata') {
            steps {
                sh '''
                    cd ${BUILD_DIR}
                    
                    # Get container details
                    CONTAINER_IP=$(sudo lxc list ${CONTAINER_NAME} --format=json | jq -r '.[0].state.network.eth0.addresses[] | select(.family=="inet").address')
                    
                    # Create detailed metadata file
                    cat > "${BACKUP_FILENAME}.metadata.json" << EOF
                    {
                        "version": "${VERSION}",
                        "build_type": "${BUILD_TYPE}",
                        "build_tag": "${BUILD_TAG}",
                        "build_number": "${BUILD_NUMBER}",
                        "build_date": "${BUILD_DATE}",
                        "container": {
                            "name": "${CONTAINER_NAME}",
                            "ip": "${CONTAINER_IP}",
                            "prometheus_port": 9090,
                            "grafana_port": 3300
                        },
                        "jenkins": {
                            "job_name": "${JOB_NAME}",
                            "build_url": "${BUILD_URL}",
                            "node_name": "${NODE_NAME}"
                        },
                        "backup": {
                            "filename": "${BACKUP_FILENAME}",
                            "size_bytes": $(stat -c%s "${BACKUP_FILENAME}" 2>/dev/null || echo 0)
                        },
                        "release_notes": "${RELEASE_NOTES}"
                    }
                    EOF
                    
                    echo "Metadata file created"
                '''
            }
        }
        
        stage('Upload to Google Drive') {
            when {
                expression { params.UPLOAD_TO_GDRIVE == true }
            }
            steps {
                echo "Uploading version ${BUILD_VERSION} to Google Drive..."
                sh '''
                    cd ${BUILD_DIR}
                    
                    # Create versioned directory structure in Google Drive
                    GDRIVE_PATH="orchestrix/lxc-images/clarity/${VERSION}"
                    
                    echo "Uploading to: pialmmhtb:${GDRIVE_PATH}/"
                    
                    # Create directory
                    rclone mkdir "pialmmhtb:${GDRIVE_PATH}"
                    
                    # Upload backup file with progress
                    echo "Uploading backup file..."
                    rclone copy "${BACKUP_FILENAME}" "pialmmhtb:${GDRIVE_PATH}/" \
                        --progress \
                        --transfers 4 \
                        --checkers 8 \
                        --stats 10s \
                        --stats-log-level INFO
                    
                    # Upload metadata
                    echo "Uploading metadata..."
                    rclone copy "${BACKUP_FILENAME}.metadata.json" "pialmmhtb:${GDRIVE_PATH}/"
                    
                    # Upload version info
                    rclone copy VERSION "pialmmhtb:${GDRIVE_PATH}/"
                    
                    # Create a latest symlink (copy to latest folder)
                    if [ "${BUILD_TYPE}" = "RELEASE" ]; then
                        echo "Updating latest release..."
                        rclone copy "${BACKUP_FILENAME}" "pialmmhtb:orchestrix/lxc-images/clarity/latest/"
                        rclone copy "${BACKUP_FILENAME}.metadata.json" "pialmmhtb:orchestrix/lxc-images/clarity/latest/"
                    fi
                    
                    # List uploaded files
                    echo "Files uploaded to Google Drive:"
                    rclone ls "pialmmhtb:${GDRIVE_PATH}/"
                '''
            }
        }
        
        stage('Container Management') {
            steps {
                script {
                    if (!params.KEEP_CONTAINER_RUNNING) {
                        sh '''
                            echo "Stopping container as requested..."
                            sudo lxc stop ${CONTAINER_NAME}
                            echo "Container stopped"
                        '''
                    } else {
                        sh '''
                            echo "Container is running and will remain active"
                            sudo lxc list ${CONTAINER_NAME}
                        '''
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                echo "Cleaning up old files..."
                sh '''
                    cd ${BUILD_DIR}
                    
                    # Archive current build
                    mkdir -p archives/${VERSION}
                    cp "${BACKUP_FILENAME}" "archives/${VERSION}/" 2>/dev/null || true
                    cp "${BACKUP_FILENAME}.metadata.json" "archives/${VERSION}/" 2>/dev/null || true
                    
                    # Keep only last 5 versions locally
                    ls -t clarity-v*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
                    
                    # Clean archives older than 30 days
                    find archives -name "*.tar.gz" -mtime +30 -delete 2>/dev/null || true
                    
                    echo "Cleanup completed"
                '''
            }
        }
    }
    
    post {
        success {
            echo """
                ✅ Build Successful!
                ====================================
                Container: ${CONTAINER_NAME}
                Version: ${BUILD_VERSION}
                Build Tag: ${BUILD_TAG}
                Build Number: ${env.BUILD_NUMBER}
                Duration: ${currentBuild.durationString}
                ====================================
                
                Backup: ${BACKUP_FILENAME}
                ${params.UPLOAD_TO_GDRIVE ? 'Uploaded to Google Drive ✓' : 'Local backup only'}
                
                Access the container:
                - Get IP: sudo lxc list clarity
                - Prometheus: http://<container-ip>:9090
                - Grafana: http://<container-ip>:3300
            """
            
            // Archive artifacts for Jenkins
            archiveArtifacts artifacts: 'VERSION, version_history.log', allowEmptyArchive: true
        }
        failure {
            echo """
                ❌ Build Failed!
                ====================================
                Container: ${CONTAINER_NAME}
                Version: ${BUILD_VERSION}
                Build Number: ${env.BUILD_NUMBER}
                ====================================
                
                Check the console output for errors.
                Common issues:
                - LXC permissions (check sudo)
                - Container already exists
                - Network connectivity
                - rclone configuration
            """
        }
        always {
            // Clean workspace but keep important files
            sh '''
                # Remove temporary files only
                rm -f *.tmp *.log.tmp 2>/dev/null || true
            '''
        }
    }
}
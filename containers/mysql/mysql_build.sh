#!/bin/bash

# MySQL LXD Container Build Script
# Generated by AI Agent for Orchestrix

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
CONTAINER_NAME="mysql"
CONFIG_FILE="$(dirname "$0")/mysql.yml"
MYSQL_VERSION="8.0"
MYSQL_ROOT_PASSWORD="changeme123"

echo -e "${GREEN}================================================${NC}"
echo -e "${GREEN}Building MySQL LXD Container${NC}"
echo -e "${GREEN}================================================${NC}"

# Function to check if container exists
container_exists() {
    lxc info "$1" &>/dev/null
}

# Function to wait for container network
wait_for_network() {
    local container=$1
    local max_wait=30
    local count=0
    
    echo -e "${YELLOW}Waiting for container network...${NC}"
    while [ $count -lt $max_wait ]; do
        if lxc exec "$container" -- ping -c 1 8.8.8.8 &>/dev/null; then
            echo -e "${GREEN}Network is ready${NC}"
            return 0
        fi
        sleep 1
        count=$((count + 1))
    done
    
    echo -e "${RED}Network timeout${NC}"
    return 1
}

# 1. Clean up existing container if exists
if container_exists "$CONTAINER_NAME"; then
    echo -e "${YELLOW}Removing existing container...${NC}"
    lxc stop "$CONTAINER_NAME" --force 2>/dev/null || true
    lxc delete "$CONTAINER_NAME" --force
fi

# 2. Create container
echo -e "${GREEN}Creating container...${NC}"
lxc launch ubuntu:22.04 "$CONTAINER_NAME"

# 3. Wait for container to be ready
sleep 5
wait_for_network "$CONTAINER_NAME"

# 4. Configure container resources
echo -e "${GREEN}Configuring container resources...${NC}"
lxc config set "$CONTAINER_NAME" limits.cpu 2
lxc config set "$CONTAINER_NAME" limits.memory 4GB
lxc config set "$CONTAINER_NAME" boot.autostart true

# 5. Create host directories for persistent storage
echo -e "${GREEN}Creating persistent storage directories...${NC}"
sudo mkdir -p /home/telcobright/lxd-data/mysql/{data,config,backup}
sudo chmod 755 /home/telcobright/lxd-data/mysql

# 6. Add storage devices
echo -e "${GREEN}Adding storage devices...${NC}"
lxc config device add "$CONTAINER_NAME" mysql-data disk \
    source=/home/telcobright/lxd-data/mysql/data \
    path=/var/lib/mysql

lxc config device add "$CONTAINER_NAME" mysql-config disk \
    source=/home/telcobright/lxd-data/mysql/config \
    path=/etc/mysql/conf.d

lxc config device add "$CONTAINER_NAME" mysql-backup disk \
    source=/home/telcobright/lxd-data/mysql/backup \
    path=/backup

# 7. Update system
echo -e "${GREEN}Updating system packages...${NC}"
lxc exec "$CONTAINER_NAME" -- apt-get update
lxc exec "$CONTAINER_NAME" -- apt-get upgrade -y

# 8. Install MySQL
echo -e "${GREEN}Installing MySQL ${MYSQL_VERSION}...${NC}"
lxc exec "$CONTAINER_NAME" -- bash -c "
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y mysql-server mysql-client
"

# 9. Configure MySQL
echo -e "${GREEN}Configuring MySQL...${NC}"

# Create custom MySQL configuration
cat > /home/telcobright/lxd-data/mysql/config/custom.cnf << 'EOF'
[mysqld]
# Performance settings
max_connections = 200
innodb_buffer_pool_size = 2G
query_cache_size = 128M
tmp_table_size = 64M
max_heap_table_size = 64M

# Network settings
bind-address = 0.0.0.0
port = 3306

# Character set
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci

# Logging
log_error = /var/log/mysql/error.log
slow_query_log = 1
slow_query_log_file = /var/log/mysql/slow.log
long_query_time = 2

# Binary logging for replication
log_bin = /var/log/mysql/mysql-bin.log
binlog_format = ROW
server-id = 1
EOF

# 10. Start and secure MySQL
echo -e "${GREEN}Starting MySQL service...${NC}"
lxc exec "$CONTAINER_NAME" -- systemctl restart mysql

# Wait for MySQL to be ready
sleep 5

# 11. Set root password and create databases/users
echo -e "${GREEN}Setting up MySQL databases and users...${NC}"
lxc exec "$CONTAINER_NAME" -- mysql -e "
    -- Set root password
    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${MYSQL_ROOT_PASSWORD}';
    
    -- Allow root remote access (for development)
    CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED WITH mysql_native_password BY '${MYSQL_ROOT_PASSWORD}';
    GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
    
    -- Create orchestrix database and user
    CREATE DATABASE IF NOT EXISTS orchestrix CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE USER IF NOT EXISTS 'orchestrix'@'%' IDENTIFIED BY 'orchpass123';
    GRANT ALL PRIVILEGES ON orchestrix.* TO 'orchestrix'@'%';
    
    -- Create monitoring database and user
    CREATE DATABASE IF NOT EXISTS monitoring CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE USER IF NOT EXISTS 'monitoring'@'%' IDENTIFIED BY 'monpass123';
    GRANT SELECT, PROCESS, REPLICATION CLIENT ON *.* TO 'monitoring'@'%';
    
    -- Apply privileges
    FLUSH PRIVILEGES;
"

# 12. Install monitoring exporter (optional)
echo -e "${GREEN}Installing MySQL exporter for Prometheus...${NC}"
lxc exec "$CONTAINER_NAME" -- bash -c "
    wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.15.0/mysqld_exporter-0.15.0.linux-amd64.tar.gz
    tar xvf mysqld_exporter-0.15.0.linux-amd64.tar.gz
    mv mysqld_exporter-0.15.0.linux-amd64/mysqld_exporter /usr/local/bin/
    rm -rf mysqld_exporter-0.15.0.linux-amd64*
    
    # Create exporter user
    mysql -u root -p${MYSQL_ROOT_PASSWORD} -e \"
        CREATE USER IF NOT EXISTS 'exporter'@'localhost' IDENTIFIED BY 'exporterpass' WITH MAX_USER_CONNECTIONS 3;
        GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost';
        FLUSH PRIVILEGES;
    \"
    
    # Create systemd service
    cat > /etc/systemd/system/mysqld_exporter.service << 'EXPORTER'
[Unit]
Description=MySQL Exporter
After=network.target

[Service]
Type=simple
Environment='DATA_SOURCE_NAME=exporter:exporterpass@(localhost:3306)/'
ExecStart=/usr/local/bin/mysqld_exporter
Restart=always

[Install]
WantedBy=multi-user.target
EXPORTER
    
    systemctl daemon-reload
    systemctl enable mysqld_exporter
    systemctl start mysqld_exporter
"

# 13. Create backup script
echo -e "${GREEN}Creating backup script...${NC}"
lxc exec "$CONTAINER_NAME" -- bash -c "
    cat > /usr/local/bin/mysql-backup.sh << 'BACKUP'
#!/bin/bash
BACKUP_DIR='/backup'
DATE=\$(date +%Y%m%d_%H%M%S)
RETENTION_DAYS=7

# Create backup
mysqldump -u root -p${MYSQL_ROOT_PASSWORD} --all-databases --single-transaction > \${BACKUP_DIR}/mysql_backup_\${DATE}.sql

# Compress backup
gzip \${BACKUP_DIR}/mysql_backup_\${DATE}.sql

# Remove old backups
find \${BACKUP_DIR} -name 'mysql_backup_*.sql.gz' -mtime +\${RETENTION_DAYS} -delete

echo \"Backup completed: mysql_backup_\${DATE}.sql.gz\"
BACKUP
    
    chmod +x /usr/local/bin/mysql-backup.sh
    
    # Add to crontab
    (crontab -l 2>/dev/null; echo '0 2 * * * /usr/local/bin/mysql-backup.sh') | crontab -
"

# 14. Show container information
echo -e "${GREEN}================================================${NC}"
echo -e "${GREEN}MySQL Container Setup Complete!${NC}"
echo -e "${GREEN}================================================${NC}"

# Get container IP
CONTAINER_IP=$(lxc list "$CONTAINER_NAME" -c 4 --format csv | cut -d' ' -f1)

echo -e "${YELLOW}Container Information:${NC}"
echo "  Name: $CONTAINER_NAME"
echo "  IP Address: $CONTAINER_IP"
echo "  MySQL Port: 3306"
echo "  Root Password: ${MYSQL_ROOT_PASSWORD}"
echo ""
echo -e "${YELLOW}Access MySQL:${NC}"
echo "  From host: mysql -h $CONTAINER_IP -u root -p${MYSQL_ROOT_PASSWORD}"
echo "  Container shell: lxc exec $CONTAINER_NAME bash"
echo "  MySQL shell: lxc exec $CONTAINER_NAME -- mysql -u root -p${MYSQL_ROOT_PASSWORD}"
echo ""
echo -e "${YELLOW}Databases created:${NC}"
echo "  - orchestrix (user: orchestrix, pass: orchpass123)"
echo "  - monitoring (user: monitoring, pass: monpass123)"
echo ""
echo -e "${YELLOW}Data persistence:${NC}"
echo "  MySQL data: /home/telcobright/lxd-data/mysql/data"
echo "  MySQL config: /home/telcobright/lxd-data/mysql/config"
echo "  Backups: /home/telcobright/lxd-data/mysql/backup"
echo ""
echo -e "${YELLOW}Monitoring:${NC}"
echo "  Prometheus exporter: http://$CONTAINER_IP:9104/metrics"
echo ""
echo -e "${GREEN}================================================${NC}"